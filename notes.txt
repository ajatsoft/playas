Access a json file with axios: https://github.com/nuxt/nuxt.js/issues/2006

  
        // const headerOffset = -100;
        // let elementPosition = element.getBoundingClientRect().top;
        // let offsetPosition = elementPosition + headerOffset;
        // window.scrollTo({
        //   top: offsetPosition,
        //   bahavior: 'smooth'
        // });
        // element.scrollIntoView(
        //   { behavior: 'smooth', block: 'start' }
        // );


        import React, { useState, useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
// import InfiniteScroll from 'react-infinite-scroller';
// import InfiniteScroll from 'react-infinite-scroll-component';
import ResultsContentItem from './ResultsContentItem/ResultsContentItem';
import scrollIntoView from 'scroll-into-view';

const useStyles = makeStyles({
  root: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(35rem, 1fr))',
    gridColumn: '5rem',
    justifyItems: 'center',
    justifyContent: 'center',
    gridRowGap: '2rem'
    
  },
  loader: {
    fontSize: '2rem',
    color: '#fff',
    backgroundColor: '#777'
  }
})

const ResultsContent = (props) => {
  const { beachesRegionList } = props;
  const [beaches, setBeaches] = useState([]);
  const [offset, setOffset] = useState(6);
  const [loading, setLoading] = useState(false);
  const [hasMoreItems, setHasMoreItems] = useState(true);
  const classes = useStyles()
  const step = 6;
 
 

  useEffect(() => {
    setBeaches(beachesRegionList.slice(0, step));
    setTimeout(() => {
      const element = document.getElementById('filter');
      if (element) {
          scrollIntoView(element, {
            time: 500,
            align: {
              top: 0.2
            }
          })
        }
        
    }, 500);
   
  
  // eslint-disable-next-line react-hooks/exhaustive-deps
  },[beachesRegionList]);

  window.onscroll = () => {
    if (
      window.innerHeight + document.documentElement.scrollTop
      === document.documentElement.offsetHeight
    ) {
      loadItems();
    }
  }
  const loadItems = () => {
    if (loading || !hasMoreItems) { return; }
    setLoading(true);
    console.log('more items');
    console.log('offset:', offset);
    setBeaches(beachesRegionList.slice(0, offset +step));
    setOffset(offset + step);
    setHasMoreItems((offset + step) >= beachesRegionList.length ? false : true);
    setLoading(false);
  }

 
  
  return (
   

  
      <div id="content" className={classes.root}>
      {
        beaches.map((beach, index) => {
            return <ResultsContentItem key={index} beach={beach} />
        })}
      </div>
    
      
    
  );
}

export default ResultsContent;

import React from 'react';
import { makeStyles } from '@material-ui/core';

const useStyles = makeStyles({
  root: {

  }
})

const Location = props => {
  const classes = useStyles();

  return (
      <section className={classes.root}>Location</section>
  );
}

export default Location;

gmapikey: AIzaSyBzE15BZUN0Xhhx0OzkMKNlaII7QX4p6GU
AIzaSyBzE15BZUN0Xhhx0OzkMKNlaII7QX4p6GU
use: key=API_KEY
chrome://flags/#ignore-gpu-blacklist